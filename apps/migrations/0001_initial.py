# Generated by Django 2.2.dev20180919211339 on 2018-09-29 14:05

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='TvConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tv_enabled', models.BooleanField(default=True, verbose_name='Enabled')),
                ('api_key_trakt', models.CharField(blank=True, max_length=254, verbose_name='Trakt API Key')),
                ('api_key_tvdb', models.CharField(blank=True, max_length=254, verbose_name='TVDB API Key')),
                ('suggestions_trending_enabled', models.BooleanField(default=True, verbose_name='Trending Shows')),
                ('suggestions_popular_enabled', models.BooleanField(default=True, verbose_name='Popular Shows')),
                ('suggestions_anticipated_enabled', models.BooleanField(default=True, verbose_name='Anticipated Shows')),
                ('sonarr_host', models.CharField(blank=True, default='localhost', max_length=254, verbose_name='Sonarr IP or Hostname')),
                ('sonarr_port', models.IntegerField(blank=True, default='8989', null=True, verbose_name='Sonarr Port')),
                ('sonarr_api_key', models.CharField(blank=True, max_length=254, verbose_name='Sonarr API Key')),
                ('sonarr_sub_directory', models.CharField(blank=True, max_length=254, verbose_name='Sonarr URL Path')),
                ('sonarr_ssl', models.BooleanField(default=False, verbose_name='Sonarr SSL Enabled')),
                ('sonarr_quality_profile', models.IntegerField(blank=True, null=True, verbose_name='Sonarr Quality Profile')),
                ('sonarr_tv_dir', models.CharField(blank=True, max_length=254, verbose_name='Sonarr TV Folder Root')),
                ('sonarr_season_folders', models.BooleanField(default=False, verbose_name='Sonarr Season Folders')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('plex_id', models.CharField(blank=True, max_length=254)),
                ('trova_admin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
